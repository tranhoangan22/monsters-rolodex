{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App2.jsx","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","searchField","placeholder","handleChange","type","value","onChange","App2","event","setState","target","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCPXC,G,MAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJZM,G,MAAY,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACpD,OACE,qBAAKb,UAAU,SAAf,SACE,uBACEc,KAAK,SACLF,YAAaA,EACbG,MAAOJ,EAEPK,SAAUH,QCoDHI,E,kDAvDb,aAAe,IAAD,8BACZ,gBA0BFJ,aAAe,SAACK,GAEd,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOL,QAAS,kBACjDM,QAAQC,IAAI,EAAKC,WA5BnB,EAAKA,MAAQ,CACXf,SAAU,GACVG,YAAa,IAJH,E,qDAYd,WAAqB,IAAD,OAGlBa,MAAM,8CACHC,MAAK,SAACC,GAAD,OAGJA,EAASC,UAEVF,MAAK,SAACG,GACL,EAAKT,SAAS,CAAEX,SAAUoB,S,oBAahC,WACE,MAAkCC,KAAKN,MAA/Bf,EAAR,EAAQA,SAAUG,EAAlB,EAAkBA,YACZmB,EAAmBtB,EAASuB,QAAO,SAAC5B,GAAD,OACvCA,EAAQE,KAAK2B,cAAcC,SAAStB,EAAYqB,kBAGlD,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAaA,EACbC,YAAY,iBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUL,SAAUsB,W,GAnDTI,aCMJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c2f739e0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.component.style.css\";\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.style.css\";\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster) => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n    {/* {props.children} */}\n  </div>\n);\n","import React from \"react\";\nimport \"./search-box.style.css\";\n\nexport const SearchBox = ({ searchField, placeholder, handleChange }) => {\n  return (\n    <div className=\"search\">\n      <input\n        type=\"search\"\n        placeholder={placeholder}\n        value={searchField}\n        // NOTE: `onChange` is a React synthetic event! it's not a DOM event like when `onchange` is an attribute of an HTML element.\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\n// Class Component: React gives us the ability to write classes that have a lot more functionalities in them, compared to a function that return some HTML\nclass App2 extends Component {\n  // We have access to the `state` object, whose properties can be accessed at any point in our class\n  constructor() {\n    super(); // Call the constructor method on `Component` class, which gives us access to `this.state`\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  // Goal: We wait for the component, we then fetch our users and update the `state` `monsters` property with a new array of users.\n\n  // `componentDidMount()` is invoked immediately after a component is mounted (inserted into the tree). https://reactjs.org/docs/react-component.html#componentdidmount\n  // If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n  componentDidMount() {\n    // JavaScript native `fetch`. https://javascript.info/fetch\n    // The fetch() method takes one mandatory argument, the path to the resource you want to fetch. It returns a Promise that resolves to the Response to that request https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) =>\n        // The json() method of the Response interface takes a Response stream and reads it to completion. https://developer.mozilla.org/en-US/docs/Web/API/Response/json\n        // It returns a promise which resolves with a JavaScript object (which is the result of parsing the body text as JSON).\n        response.json()\n      )\n      .then((users) => {\n        this.setState({ monsters: users });\n      });\n  }\n\n  // A good rule of thumb is this: Use arrow functions on any class methods you define and aren't part of React (i.e. render(), componentDidMount()).\n  handleChange = (event) => {\n    // to print out the updated value of `this.state` as soon as we type sth, the 2nd-argument callback is run after the `setState()` is finished\n    this.setState({ searchField: event.target.value }, () =>\n      console.log(this.state)\n    );\n  };\n\n  // the render() method inside the App class returns the HTML\n  render() {\n    const { monsters, searchField } = this.state; // we don't want to modify our state, we want to keep the rawu original data just in case\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          searchField={searchField}\n          placeholder=\"Search monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App2;\n\n// DECLARATIVE APPROACH: As soon as `this.setState`, the `state` object is updated and the component is rendered again (`render()` is called again)\n\n\n\n// GITHUB let us serve static pages for free!!\n// https://create-react-app.dev/docs/deployment/#step-1-add-homepage-to-packagejson\n// https://tranhoangan22.github.io/monsters-rolodex/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './App2';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}